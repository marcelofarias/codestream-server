#!/usr/bin/env python3

import os
import sys
import argparse
import re

sys.path.append(os.environ['DT_TOP'] + "/lib")
import sysUtils as su


# utility function - takes a json file with comments on top (optional) and sorts the json data
def sortJsonWithHeaderComments(file):
	comments = su.shellExecNoBuffer(f"grep '^//' {file} >/tmp/_comments; echo >>/tmp/_comments")
	json = su.readJsonFileIgnoreComments(file)
	su.dumpDict(json, "/tmp/_json")
	print(f"backing up file to {file}.backup")
	su.shellExecNoBuffer(f"cp {file} {file}.backup")
	su.shellExecNoBuffer(f"cat /tmp/_comments /tmp/_json >{file}")
	os.remove("/tmp/_comments")
	os.remove("/tmp/_json")


def debugMsg(msg):
	if args.debug:
		su.printErr(msg)


def getSectionDefaultsFromSchema(schema, cfg, spaces):
	for prop in list(schema.keys()):
		debugMsg(f"{spaces}getSectionDefaultsFromSchema: prop = {prop}")
		if 'desc' in schema[prop]:
			cfg[prop] = su.someValueOrNone(schema[prop], 'default')
		else:
			cfg[prop] = {}
			getSectionDefaultsFromSchema(schema[prop], cfg[prop], f"{spaces}  ")


# return the repeating block's key, if found
def blockKey(schema, spaces):
	keyList = list(schema.keys())
	debugMsg(f"{spaces}blockKey schema keys are {keyList}")
	if len(keyList) == 1:
		match = re.search(r'^\<(.+)\>$', keyList[0])
		if match:
			debugMsg(f"{spaces}repeating block found with key {match.group(1)}")
			return(match.group(1))
	return None


# loads a block from the profile, processing special directives like "_loadSecretsFile"
# Also ensures that no variables in remote files which are not defined in the schema
# are acceidentally added - enforces the schema!
def fetchBlockProperties(profileEnvBlock, schema, repeatingBlockKey, spaces):
	debugMsg(f"{spaces}fetchBlockProperties schema key list {list(schema.keys())}")
	if '_loadSecretsFile' in profileEnvBlock:
		secretsFile = f"{args.secrets}/{profileEnvBlock['_loadSecretsFile']}"
		debugMsg(f"{spaces}loading {secretsFile}")
		secretsData = su.readKeyValueFile(secretsFile)
		block = {}
		if repeatingBlockKey:
			getSectionDefaultsFromSchema(schema[repeatingBlockKey], block, spaces)
		else:
			getSectionDefaultsFromSchema(schema, block, spaces)
		for sProp in list(block.keys()):
			if sProp in secretsData:
				block[sProp] = secretsData[sProp]
		return block
	return profileEnvBlock


def buildCfgFile(cfg, schema, profile, spaces=''):
	envParentBlock = True if 'defaultEnv' in profile else False
	debugMsg(f"{spaces}buildCfgFile: {list(profile.keys())}, envParentBlock = {envParentBlock}")
	if envParentBlock:
		# we are processing an environment block (props are environments or defaultEnv)
		envParent = args.env if su.someValueOrNone(profile, args.env) is None else 'defaultEnv'
		debugMsg(f"{spaces}diving deeper with envParent = {envParent}, {profile[envParent]}")
		buildCfgFile(cfg, schema, profile[envParent], f"{spaces}  ")
		return
	blockDefaults = {}
	if 'defaultEnv' not in profile:
		getSectionDefaultsFromSchema(schema, blockDefaults, spaces)
	fillSection = False
	for prop in list(profile.keys()):
		# envBlock = True if 'defaultEnv' in profile[prop] else False
		# env = args.env if args.env in profile[prop] else 'defaultEnv'
		envBlock = True if envParentBlock or su.someValueOrNone(profile[prop], 'defaultEnv') is not None else False
		env = args.env if su.someValueOrNone(profile[prop], args.env) else 'defaultEnv'
		repeatingBlockKeyVar = blockKey(schema, spaces)  # appProvider
		repeatingBlockKey = f"<{repeatingBlockKeyVar}>" if repeatingBlockKeyVar else None  # <appProvider>
		debugMsg(f"\n{spaces}=== checking prop = {prop}, envBlock = {envBlock}, env = {env}, repeatingBlockKeyVar = {repeatingBlockKeyVar}")

		if type(profile[prop]) is dict and not profile[prop]:
			debugMsg(f"{spaces}1 empty dict in profile - using schema defaults")
			cfg[prop] = {}
			getSectionDefaultsFromSchema(schema[prop], cfg[prop], spaces)
		elif type(profile[prop]) is dict and envBlock:
			debugMsg(f"{spaces}2 using profile dict for {env}")
			cfg[prop] = fetchBlockProperties(profile[prop][env], schema[prop], repeatingBlockKey, spaces)  # if schema[prop] should be schema, we're in trouble!
			if not cfg[prop]:
				debugMsg(f"{spaces}2A empty dict for {env}, repeatingBlockKey = {repeatingBlockKey} - using schema defaults")
				if repeatingBlockKey:
					getSectionDefaultsFromSchema(schema[repeatingBlockKey], cfg[prop], spaces)
				else:
					getSectionDefaultsFromSchema(schema[prop], cfg[prop], spaces)
		elif type(profile[prop]) is dict:
			debugMsg(f"{spaces}3 diving deeper on {prop}")
			cfg[prop] = {}
			if repeatingBlockKey:
				buildCfgFile(cfg[prop], schema[repeatingBlockKey], profile[prop], f"{spaces}  ")
			else:
				buildCfgFile(cfg[prop], schema[prop], profile[prop], f"{spaces}  ")
		elif prop in schema:
			debugMsg(f"{spaces}4 setting scalar")
			cfg[prop] = profile[prop]
			fillSection = True
		else:
			su.printErr("property {} not defined in schema".format(prop))
			exit(1)
		if args.debug:
			su.dumpDict(cfg[prop], None, f"end of loop for prop: cfg[{prop}]:")

	# this will complete a section with default properties where the profile only specifies a fraction of them
	if blockDefaults and fillSection:
		for defaultProp in list(blockDefaults.keys()):
			if defaultProp not in cfg:
				cfg[defaultProp] = blockDefaults[defaultProp]


# return a reference to a dict (object) within cfgFile that
# traverses the keyPath. If the enter path cannot be followed
# return the leaf.
def findNode(keyPath):
	global cfgFile
	node = cfgFile
	i = 0
	while i < len(keyPath):
		if keyPath[i] not in node:
			return node
		node = node[keyPath[i]]
		i += 1
	return node


# Create a cfgFile dict based on variables.json
def buildCfgFileProperties(schema, keyPath, task='show-desc'):
	global cfgFile
	for k in schema.keys():
		node = findNode(keyPath)
		if 'desc' not in schema[k]:
			node[k] = {}
			buildCfgFileProperties(schema[k], keyPath + [k], task)
		else:
			if task == 'show-desc':
				node[k] = schema[k]['desc']
				if su.someValueOrNone(schema[k], 'env'):
					node[k] += f" [{schema[k]['env']}]"
			elif task == 'show-env':
				node[k] = schema[k]['env'] if su.someValueOrNone(schema[k], 'env') else "undefined"


secretsDefault = ""
if su.someValueOrNone(os.environ, 'KM_PKI'):
	secretsDefault = f"{os.environ['KM_PKI']}/secrets"
parser = argparse.ArgumentParser(description="create config data files from templates")
parser.add_argument('--debug', action='store_true', default=False, help="debug mode")
parser.add_argument('--show-desc', action='store_true', default=False, help="display parameter with descriptions")
parser.add_argument('--show-env', action='store_true', default=False, help="display parameter environment vars")
parser.add_argument('--sort-json', type=str, help="sort a json file where their might be comments on top (not embedded)")
parser.add_argument('-p', '--profile', type=str, help="profile")
parser.add_argument('-e', '--env', type=str, default="defaultEnv", help="environment")
parser.add_argument('--secrets', type=str, default=secretsDefault, help="secrets directory")
parser.add_argument('--out', type=str, help="output file (defaults to stdout)")
if len(sys.argv) == 1:
	parser.print_help()
	exit(1)

args = parser.parse_args()
# if not args.secrets:
# 	printErr("warning: no secrets directory defined")

repoRoot = os.path.dirname(os.path.realpath(__file__)) + "/.."
schema = su.readJsonFileIgnoreComments(repoRoot + "/parameters.json")

cfgFile = {}
if args.show_desc:
	buildCfgFileProperties(schema, [])
elif args.show_env:
	buildCfgFileProperties(schema, [], 'show-env')
elif args.sort_json:
	sortJsonWithHeaderComments(args.sort_json)
	exit(0)
elif args.profile:
	profile = su.readJsonFileIgnoreComments(args.profile)
	buildCfgFile(cfgFile, schema, profile)
else:
	parser.print_help()
	exit(1)

if args.out:
	su.dumpDict(cfgFile, args.out)
else:
	debugMsg("-----------  RESULTS  -------------")
	su.dumpDict(cfgFile)
exit(0)
