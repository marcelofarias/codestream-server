#!/bin/bash

# update boot strap files used when installing the onprem modules on instances

function usage {
	echo "usage: `basename $0` [--yes | -y] [--force-pkg]

    --yes | -y    automatically answer 'yes' to all interactive prompts (batch mode)
    --force-pkg   force creation of and upload overlay packages regardless if the configs have changed

    This script creates the onprem overlay config files (to be overlayed on top of codestream configs
    used for on-prem installations) in order to create pre-canned onprem configurations.

    First it creates the overlay files from the profiles and secrets data and deposits them in
    the \$KM_PKI/secrets/config/ directory.

    Next it optionally creates tarballs containing the overlays and other supplemental data files
    used for onprem installations, depositing them in the S3 configuration buckets. See the
    'etc/onprem-bootstrap-distribution' file for details.
"
	exit 1
}

[ -z "$KM_PKI" ] && echo "KM_PKI undefined" && exit 1

answerYes=0
forcePkg=0
while [ -n "$*" ]; do
	case "$1" in
	--yes|-y)
		answerYes=1;;
	--force-pkg)
		forcePkg=1;;
	*)
		usage;;
	esac
	shift
done

binDir=`dirname $0`
repoRoot=$(cd $binDir/.. && pwd)
# srcDir=`dirname $repoRoot`
schemaVersion=`cat $repoRoot/parameters.version`

. $repoRoot/lib/update_funcs.sh

tmpDir=/tmp/x$$
mkdir $tmpDir
targetCacheFile=config-cache.template

# specialized overlay config files used for custom codestream configurations
for csEnv in avs oppr opbeta spin-up-dev
do
	# generate the overlay file and save it with the rest of the codestream configs as onprem-overlays_*
	[ -n "$verbose" ] && echo $binDir/process-profile --profile $repoRoot/profiles/onprem-overlays.json --env $csEnv --out $KM_PKI/secrets/config/onprem-overlays_${csEnv}_${schemaVersion}_.json.x
	$binDir/process-profile --profile $repoRoot/profiles/onprem-overlays.json --env $csEnv --out $KM_PKI/secrets/config/onprem-overlays_${csEnv}_${schemaVersion}_.json.1
	if [ -f $repoRoot/profiles/supplemental/onprem-overlays.$csEnv.json ]; then
		# add optional env specific supplemental properties by overlaying them
		# on top of the generated config.
		dt-merge-json --existing-file  $KM_PKI/secrets/config/onprem-overlays_${csEnv}_${schemaVersion}_.json.1 --new-file $repoRoot/profiles/supplemental/onprem-overlays.$csEnv.json  --overwrite-from-new >$KM_PKI/secrets/config/onprem-overlays_${csEnv}_${schemaVersion}_.json.x || exit 1
		/bin/rm $KM_PKI/secrets/config/onprem-overlays_${csEnv}_${schemaVersion}_.json.1
	else
		mv $KM_PKI/secrets/config/onprem-overlays_${csEnv}_${schemaVersion}_.json.1 $KM_PKI/secrets/config/onprem-overlays_${csEnv}_${schemaVersion}_.json.x
	fi
	diff_notify $KM_PKI/secrets/config/onprem-overlays_${csEnv}_${schemaVersion}_.json "$yes"
	if [ $? -eq 0 -o $forcePkg -eq 1 ]; then
		pkgName=`grep ^${csEnv}: $repoRoot/etc/onprem-bootstrap-distribution | head -1 | cut -f2 -d:`
		if [ -z "$pkgName" ]; then
			echo "No bootstrap file name associated with this file"
		else
			# create the onprem package (tarball) and distribute it to S3
			echo -n "create and upload $pkgName (y/N)? "
			[ $answerYes -eq 0 ] && read ans || { echo "Y"; ans=y; }
			if [ "$ans" == y ]; then
				[ -f $repoRoot/etc/$targetCacheFile.$csEnv ] && srcCacheFile="$targetCacheFile.$csEnv" || srcCacheFile=$targetCacheFile
				echo cp $repoRoot/etc/$srcCacheFile $tmpDir/$targetCacheFile
				cp $repoRoot/etc/$srcCacheFile $tmpDir/$targetCacheFile

				cp $KM_PKI/secrets/config/onprem-overlays_${csEnv}_${schemaVersion}_.json $tmpDir/custom-config-options.json
				if [ $? -eq 0 ]; then
					(cd $tmpDir && tar czpvf $pkgName custom-config-options.json config-cache.template)
					if [ $? -eq 0 ]; then
						cfgGroup=`grep ^${csEnv}: $repoRoot/etc/onprem-bootstrap-distribution | head -1 | cut -f3 -d:`
						[ -z "$cfgGroup" ] && echo "config group $cfgGroup for env $csEnv not found" && exit 1
						echo aws s3 cp $tmpDir/$pkgName s3://codestream-ops/vmcfg/$cfgGroup/$pkgName --sse
						aws s3 cp $tmpDir/$pkgName s3://codestream-ops/vmcfg/$cfgGroup/$pkgName --sse
					fi
				fi
				/bin/rm $tmpDir/*
				echo
			fi
		fi
	fi
done
/bin/rm -rf $tmpDir
exit 0
